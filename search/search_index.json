{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Sui-Base?","text":"<p>sui-base makes it easy to create \"workdirs\", each clearly defining a development environment targeting a network.</p> <p></p> <p>Other features include:</p> <ul> <li>Simple \"$ localnet star/stop/status\" command.</li> <li>Deterministic \"$ localnet regen\" with always the same client addresses and customizable gas refill.</li> <li>\"$ localnet publish\" for quick edit/debug cycle.</li> <li>lsui/dsui/tsui scripts shortcut to call the proper sui client binary in respectively the localnet/devnet/testnet workdirs.</li> <li>Stay tune for more...</li> </ul> <p>Easy to install and not intrusive on your system.</p> <p>Sui-base is community driven, please join us on Discord  to share your Sui development need!</p>"},{"location":"links/","title":"Resources","text":""},{"location":"links/#sui-official-links","title":"Sui Official Links","text":"<ul> <li>https://sui.io</li> <li>https://suifoundation.io</li> <li>https://mystenlabs.com</li> </ul>"},{"location":"links/#sui-network-sdk","title":"Sui Network SDK","text":"Developer Resource Links Golang Coming Chat github  Block Vision github  Java GrapeBaBa github  Kotlin CosmoStation github  .NET (C#) Daniel Moos github  Python Axiom:1 github  Rust Mysten Labs Website Docs  Typescript/Javacript Mysten Labs github"},{"location":"references/","title":"References","text":"<p>Sui-Base define a few conventions to coordinate among SDKs, apps and user.</p>"},{"location":"references/#filesystem-path-convention","title":"Filesystem Path Convention","text":"<p>There are 6 &lt;WORKDIR&gt;: active, localnet, devnet, testnet, mainnet and cargobin</p> <p>Each &lt;WORKDIR&gt; has the following components:</p> Component Purpose sui-exec A script allowing any app to safely call the right sui client+config combination. Use it like you would use the \"sui\" client from Mysten Lab. config Directory with Mysten Lab files needed to run the sui client (client.yaml and sui.keystore). sui-repo A local repo of the Mysten lab sui code for building the client binary, but also for any apps to use the Rust SDK crates for compatibility. published-data Information about last package published from this &lt;WORKDIR&gt; using sui-base scripts. This can be retrieved through JSON files or through sui-base SDK helpers. <p>Applications can expect the components to be always at these fix locations: <pre><code> ~/\n \u2514\u2500 sui-base/\n      \u2514\u2500 workdirs/\n           \u2514\u2500 &lt;WORKDIR&gt;/\n                 \u251c\u2500\u2500 sui-exec\n                 \u2502\n                 \u251c\u2500\u2500 config\n                 \u2502      \u251c\u2500\u2500 client.yaml\n                 \u2502      \u2514\u2500\u2500 sui.keystore\n                 \u2502\n                 \u251c\u2500\u2500 sui-repo\n                 \u2502      \u251c\u2500\u2500 crates/\n                 \u2502      \u251c\u2500\u2500 target/\n                 \u2502      \u2514\u2500\u2500 ... complete sui repo (debug built) ...\n                 \u2502\n                 \u2514\u2500\u2500 published-data\n                        \u2514\u2500 &lt;package name&gt;\n                                \u2514\u2500 publish-output.json\n</code></pre></p> Official and Complete Path List <p>~/sui-base/workdirs/&lt;WORKDIR&gt;/sui-exec ~/sui-base/workdirs/&lt;WORKDIR&gt;/config/client.yaml ~/sui-base/workdirs/&lt;WORKDIR&gt;/config/sui.keystore ~/sui-base/workdirs/&lt;WORKDIR&gt;/sui-repo/ ~/sui-base/workdirs/&lt;WORKDIR&gt;/published-data/&lt;PACKAGE_NAME&gt;/publish-output.json</p> <p>TODO next:</p> <ul> <li>What is the \"active\" workdir?</li> <li>What is the \"cargobin\" workdir?</li> <li>How to use the sui-exec script?</li> <li>How to use the publish-output.json?</li> </ul>"},{"location":"references/#sui-client-concurrency-limitation","title":"Sui Client Concurrency Limitation","text":"<p>Explain architecture limitation related to active-address, active-env, switch and such...</p>"},{"location":"community/","title":"Sui-Base is Community Driven","text":""},{"location":"community/#where-is-the-sui-developer-community","title":"Where is the Sui developer community?","text":"<p>For Sui specific discussions:</p> <ul> <li> <p>Sui Official Discord </p> </li> <li> <p>Sui Official Forum </p> </li> </ul> <p>For Sui-Base (+any 3rd party dev tool welcome to join):</p> <ul> <li>Sui-Base Discord  </li> </ul>"},{"location":"community/#how-to-be-a-writer-for-the-cookbook","title":"How to be a writer for the Cookbook?","text":"<p>Anyone can participate. </p> <p>The website is built from markdown files (.md) and served directly from github . You submit changes with a pull request.</p> <p>Running/Editing the website</p> <p>You can run the whole website locally with just pip and git (See here  for more ways to install).</p> Installation Steps <pre><code>$ cd ~\n$ git clone https://github.com/sui-base/sui-base.git\n$ cd sui-base/docs\n$ python3 -m venv env; source env/bin/activate\n$ pip install mkdocs-material\n$ pip install mkdocs-git-revision-date-localized-plugin\n$ pip install mkdocs-minify-plugin\n$ mkdocs serve\n...\nOpen your browser at http://127.0.0.1:8000/\n</code></pre> <p>The server updates your browser automatically as you update the files under ~/sui-base/docs.</p> <p>Edit mkdocs.yml  to add new subject to the left navigation bar.</p> <p>Check mkdocs-material  for great markdown tricks.</p>"},{"location":"cookbook/","title":"What is the Sui Cookbook?","text":"<p>Community maintained documentations for the developers of Sui applications and tools.</p> <p>Includes guides, code snippets, and references to other resources.</p> <p> Contribute...</p> <p> Discuss on Discord </p>"},{"location":"cookbook/example/","title":"TODO","text":""},{"location":"cookbook/fullnode/","title":"Fullnode","text":"<p>TODO:</p> <ul> <li> <p>Briefly explain benefit of running your own devnet node (because the public one is sometimes down or too busy).</p> </li> <li> <p>Do not repeat here the installation procedure \"pin\" in Discord node operators. Pointless (and moderators are rightfully not warm about 3rd party procedures). Just mention, docker or service...  and warn about pitfall of using Contabo and such.</p> </li> <li> <p>Tell about SuiMon local installation and remote monitoring such as scale3  + andrew + suiscan.xyz monitoring</p> </li> <li> <p>May be at some point a section about Prometheus + Grafana for advanced user.</p> </li> </ul>"},{"location":"cookbook/move/","title":"Move Language","text":"<p>This is an easy mini-project for first time contributor.</p> <p>Suggested guideline:</p> <p>Cookbook writing has to add original content/value, otherwise stick to refer to quality external resources. Nothing wrong at pointing in the right direction...</p>"},{"location":"cookbook/sui-intro/","title":"Sui Basic Concepts","text":"<p>This is an easy mini-project for first time contributor.</p> <p>TODO Simple short sentence intro. Mostly \"links to more info\". Value is in the code snippets.</p>"},{"location":"how-to/configure-sui-base-yaml/","title":"Workdir Customization ( sui-base.yaml )","text":"<p>Changing the remote github repo, branch, RPC ports etc... are done using the sui-base.yaml found in each workdir ( Example: ~/sui-base/workdirs/localnet/sui-base.yaml )</p> <p>We will cover here only a few common use case. See this sui-base.yaml  for the complete parameters list.</p>"},{"location":"how-to/configure-sui-base-yaml/#how-to-increase-the-initial-funding-of-localnet","title":"How to increase the initial funding of localnet?","text":"<p>Add <code>initial_fund_per_address: 9999999999999999999</code> then type \"localnet regen\".</p> <p>Set the number to as much as you need (max 64 bits unsigned supported).</p>"},{"location":"how-to/configure-sui-base-yaml/#how-to-change-the-default-branch-andor-repo-used-by-a-workdir","title":"How to change the default branch and/or repo used by a workdir?","text":"<p>Add the default_repo_XXXX variables (it is ok to change only one) and then type the workdir update command (e.g. \"localnet update\"). Example:</p> <pre><code>default_repo_url: \"https://github.com/acme/forked_sui.git\"\ndefault_repo_branch: \"main\"\n</code></pre>"},{"location":"how-to/install/","title":"Install Sui-Base","text":"<p>Supported operating systems</p> <ul> <li>Linux - (Ubuntu tested, others may work)</li> <li>macOS</li> <li>Windows 10/11 WSL2 (Ubuntu tested only)</li> </ul> <p>Prerequisites</p> <p>Install the Sui prerequisites. </p> <p>You can skip the section about installing the Sui binaries (unless you have an application that depends on ~/.sui/sui_config to exist).</p> How will sui-base get the Sui binaries? <p>sui-base automatically download the code and builds a sui client for each workdir. One binary to target each network. This is better than a manual procedure installing a single binary per user and \"switch network\"... which does not work well if the binary happens to not be compatible with one of the network.</p> <p>Your app can also refer to the same local Sui Rust SDK crates downloaded by sui-base, and further minimize compatibility issues.</p> <p>Sui-Base Installation <pre><code>$ cd ~ $ git clone https://github.com/sui-base/sui-base.git\n$ cd sui-base\n$ ./install\n</code></pre> Sui-base is not intrusive on your system. The installation is per user:</p> <ul> <li>All its files and workdirs are kept in ~/sui-base</li> <li>The installation only creates symlinks in ~/.local/bin</li> </ul> Why does sui-base need to be cloned in the user home (~) directory? <p>Sui-base workdir is an \"open standard\" and benefit from being easily found by many apps/sdks. The user home directory is easy to access for most apps and scripts...</p> <p>Starting Localnet <pre><code>$ localnet start\n</code></pre> The first time will take minutes because of downloading and building the source code.</p> <p>Type \"localnet\" for help.</p>"},{"location":"how-to/scripts/","title":"Scripts","text":"<p>TODO: Only about how they are useful... at high level.</p> <p>No exhaustive doc here. Usage doc is from the CLI \"--help\".</p>"},{"location":"python/","title":"Overview","text":""},{"location":"python/#sui-base-python","title":"sui-base Python","text":"<p>Contains python program examples for interacting with Sui blockchain. The demo applications require <code>pysui</code> Python SUI Client SDK to run.</p>"},{"location":"python/#pre-setup","title":"Pre Setup","text":"<p>You should first setup <code>sui-base</code> by following steps found Here</p>"},{"location":"python/#setup","title":"Setup","text":"Setup Steps <pre><code>$ cd sui-base\n$ python3 -m venv env\n$ . env/bin/activate\n$ pip install -U pip\n$ pip install pysui\n</code></pre>"},{"location":"rust/demo-app/","title":"demo-app","text":"<p>A good starting point for Rust+Move development on VSCode.</p> <p>What to expect?</p> <ul> <li>A simple Rust+Move dApps that increment a Counter on your localnet.</li> <li>The counter emit a Move event on every increment.</li> <li>Rust app that subscribe and show all Sui Move events (do \"cargo run events\") </li> <li>Rust app to send a transaction to increment the counter (do \"cargo run count\").</li> <li>Use of sui-base scripts and helper to accelerate and automate Sui development.</li> </ul> <p>To run this example, Sui-base installation is required. To open the project, point VSCode on ~/sui-base/rust/demo-app.</p> <p>Online references: Source Code , counter.move </p>"}]}