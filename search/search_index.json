{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Sui-Base?","text":"<p>sui-base create \"workdirs\", each defining a development environment targeting a network.</p> <p>The workdir abstraction allows your whole development environment (app, SDKs, automation) to seamlessly switch environment... and use the properly matching sui binary version, keystore, configuration and more... (e.g the ObjectID of your last packaged published).</p> <p>Other features includes:</p> <ul> <li>Simple \"$ localnet star/stop/status\" command.</li> <li>Deterministic \"$ localnet regen\" with always the same client addresses and customizable gas refill.</li> <li>\"$ localnet publish\" for quick edit/debug cycle.</li> <li>lsui/dsui/tsui scripts to call respectively the proper localnet/devnet/testnet sui binary.</li> <li>More to come...</li> </ul> <p>Easy to install and not intrusive on your system.</p> <p>Sui-base is community driven, please join our Discord  to share with us your Sui development need!</p>"},{"location":"links/","title":"Resources","text":""},{"location":"links/#sui-official-links","title":"Sui Official Links","text":"<ul> <li>https://sui.io</li> <li>https://suifoundation.io</li> <li>https://mystenlabs.com</li> </ul>"},{"location":"links/#sui-network-sdk","title":"Sui Network SDK","text":"Developer Resource Links Golang Coming Chat github  Block Vision github  Java GrapeBaBa github  Kotlin CosmoStation github  .NET (C#) Daniel Moos github  Python Axiom:1 github  Rust Mysten Labs Website Docs  Typescript/Javacript Mysten Labs github"},{"location":"referenced/","title":"References","text":"<p>TODO: This is where we will eventually \"set in stone\" the following:</p> <ul> <li>Paths</li> <li>Environment variables</li> <li>Scripts</li> </ul> <p>The reference upon which other SDK/apps can build upon...</p>"},{"location":"community/","title":"Sui-Base is Community Driven","text":""},{"location":"community/#where-is-the-sui-developer-community","title":"Where is the Sui developer community?","text":"<p>For Sui specific discussions:</p> <ul> <li> <p>Sui Official Discord </p> </li> <li> <p>Sui Official Forum </p> </li> </ul> <p>For Sui-Base (+any 3rd party dev tool welcome to join):</p> <ul> <li>Sui-Base Discord  </li> </ul>"},{"location":"community/#how-to-be-a-writer-for-the-cookbook","title":"How to be a writer for the Cookbook?","text":"<p>Anyone can participate.</p> <p>The website is built from markdown files (.md) and served directly from github . You submit changes with a pull request.</p> <p>Do not hesitate to reach out on Discord  for assistance.</p> <p>Running/Editing the website</p> <p>You can run the whole website locally with just pip and git (See here  for more ways to install).</p> Installation Steps <pre><code>$ cd ~\n$ git clone https://github.com/sui-base/sui-base.git\n$ cd sui-base/docs\n$ python3 -m venv env; source env/bin/activate\n$ pip install mkdocs-material\n$ pip install mkdocs-git-revision-date-localized-plugin\n$ pip install mkdocs-minify-plugin\n$ mkdocs serve\n...\nOpen your browser at http://127.0.0.1:8000/\n</code></pre> <p>The server updates your browser automatically as you update the files under ~/sui-base/docs.</p> <p>Edit mkdocs.yml  to add new subject to the left navigation bar.</p> <p>Check mkdocs-material  for great markdown tricks.</p>"},{"location":"cookbook/","title":"What is Sui Cookbook?","text":"<p>It is work in progress...</p> <p>There is no real content in the Cookbook yet.</p> <p>Just filler content as we test the website navigation.</p>"},{"location":"cookbook/move/","title":"Move Language","text":"<p>TODO Refer to existing ressources... this is well covered already, avoid repeat here.</p>"},{"location":"cookbook/sui-install/","title":"Sui Installation","text":"<p>TODO Document choice: * Refer to Sui Official Website for binary and/or source code installation * Put a link to Sui-Base for an alternative setup</p>"},{"location":"cookbook/sui-intro/","title":"Sui Basic Concepts","text":"<p>TODO Simple short sentence intro. Mostly \"links to more info\". Value is in the code snippets.</p>"},{"location":"cookbook/test/Subject1/","title":"Example 1","text":""},{"location":"cookbook/test/Subject1/#just-random-documentation-for-test","title":"Just Random Documentation For Test","text":"<p>This is a shameless copy from \"mkdocs material\" to show how sui-base will look like.</p> <p>See here for original: https://squidfunk.github.io/mkdocs-material/reference/</p> <p>(This page will be deleted soon!)</p>"},{"location":"cookbook/test/Subject1/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with [Pygments], the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p>"},{"location":"cookbook/test/Subject1/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject1/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject1/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"cookbook/test/Subject1/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that [Pygments] generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject1/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"cookbook/test/Subject1/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject1/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject1/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"cookbook/test/Subject1/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject1/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject1/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When [InlineHilite] is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"cookbook/test/Subject1/#embedding-external-files","title":"Embedding external files","text":"<p>When [Snippets] is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"cookbook/test/Subject1/#customization","title":"Customization","text":""},{"location":"cookbook/test/Subject1/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If [Pygments] is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"cookbook/test/Subject1/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"cookbook/test/Subject1/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with [Pygments] \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"cookbook/test/Subject2/","title":"Example 2","text":""},{"location":"cookbook/test/Subject2/#just-random-documentation-for-test","title":"Just Random Documentation For Test","text":"<p>This is a shameless copy from \"mkdocs material\" to show how sui-base will look like.</p> <p>See here for original: https://squidfunk.github.io/mkdocs-material/reference/</p> <p>(This page will be deleted soon!)</p>"},{"location":"cookbook/test/Subject2/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with [Pygments], the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p>"},{"location":"cookbook/test/Subject2/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject2/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject2/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"cookbook/test/Subject2/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that [Pygments] generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject2/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"cookbook/test/Subject2/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject2/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject2/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"cookbook/test/Subject2/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject2/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject2/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When [InlineHilite] is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"cookbook/test/Subject2/#embedding-external-files","title":"Embedding external files","text":"<p>When [Snippets] is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"cookbook/test/Subject2/#customization","title":"Customization","text":""},{"location":"cookbook/test/Subject2/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If [Pygments] is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"cookbook/test/Subject2/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"cookbook/test/Subject2/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with [Pygments] \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"cookbook/test/Subject3/","title":"Subject3","text":""},{"location":"cookbook/test/Subject3/#just-random-documentation-for-test","title":"Just Random Documentation For Test","text":"<p>This is a shameless copy from \"mkdocs material\" to show how sui-base will look like.</p> <p>See here for original: https://squidfunk.github.io/mkdocs-material/reference/</p> <p>(This page will be deleted soon!)</p>"},{"location":"cookbook/test/Subject3/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with [Pygments], the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p>"},{"location":"cookbook/test/Subject3/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject3/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/Subject3/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"cookbook/test/Subject3/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that [Pygments] generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject3/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"cookbook/test/Subject3/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject3/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/Subject3/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"cookbook/test/Subject3/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject3/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/Subject3/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When [InlineHilite] is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"cookbook/test/Subject3/#embedding-external-files","title":"Embedding external files","text":"<p>When [Snippets] is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"cookbook/test/Subject3/#customization","title":"Customization","text":""},{"location":"cookbook/test/Subject3/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If [Pygments] is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"cookbook/test/Subject3/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"cookbook/test/Subject3/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with [Pygments] \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"cookbook/test/SubjectSub1/","title":"SubjectSub1","text":""},{"location":"cookbook/test/SubjectSub1/#just-random-documentation-for-test","title":"Just Random Documentation For Test","text":"<p>This is a shameless copy from \"mkdocs material\" to show how sui-base will look like.</p> <p>See here for original: https://squidfunk.github.io/mkdocs-material/reference/</p> <p>(This page will be deleted soon!)</p>"},{"location":"cookbook/test/SubjectSub1/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with [Pygments], the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p>"},{"location":"cookbook/test/SubjectSub1/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"cookbook/test/SubjectSub1/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that [Pygments] generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/SubjectSub1/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/SubjectSub1/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"cookbook/test/SubjectSub1/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When [InlineHilite] is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"cookbook/test/SubjectSub1/#embedding-external-files","title":"Embedding external files","text":"<p>When [Snippets] is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#customization","title":"Customization","text":""},{"location":"cookbook/test/SubjectSub1/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If [Pygments] is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"cookbook/test/SubjectSub1/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"cookbook/test/SubjectSub1/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with [Pygments] \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"cookbook/test/SubjectSub2/","title":"SubjectSub2","text":""},{"location":"cookbook/test/SubjectSub2/#just-random-documentation-for-test","title":"Just Random Documentation For Test","text":"<p>This is a shameless copy from \"mkdocs material\" to show how sui-base will look like.</p> <p>See here for original: https://squidfunk.github.io/mkdocs-material/reference/</p> <p>(This page will be deleted soon!)</p>"},{"location":"cookbook/test/SubjectSub2/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code  blocks, and allows to include source code directly from other files. Add the  following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\nline_spans: __span\npygments_lang_class: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with [Pygments], the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p>"},{"location":"cookbook/test/SubjectSub2/#code-copy-button","title":"Code copy button","text":"<p> 9.0.0 \u00b7  Feature flag</p> <p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#code-selection-button","title":"Code selection button","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\nfeatures:\n- content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable  them for a specific code block by using a slightly different syntax based on  the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#code-annotations","title":"Code annotations","text":"<p> 8.0.0 \u00b7  Feature flag</p> <p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be  prefixed by a <code>.</code>.</p>"},{"location":"cookbook/test/SubjectSub2/#custom-selectors","title":"Custom selectors","text":"<p> Sponsors only \u00b7  insiders-4.32.0 \u00b7  Experimental</p> <p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in  strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\nannotate:\njson: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that [Pygments] generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n\"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/SubjectSub2/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.1:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\nfeatures:\n- content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"cookbook/test/SubjectSub2/#stripping-comments","title":"Stripping comments","text":"<p> 8.5.0 \u00b7  Experimental</p> <p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"cookbook/test/SubjectSub2/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When [InlineHilite] is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"cookbook/test/SubjectSub2/#embedding-external-files","title":"Embedding external files","text":"<p>When [Snippets] is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#customization","title":"Customization","text":""},{"location":"cookbook/test/SubjectSub2/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If [Pygments] is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n--md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\ncolor: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre>"},{"location":"cookbook/test/SubjectSub2/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n--md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol>"},{"location":"cookbook/test/SubjectSub2/#annotations-with-numbers","title":"Annotations with numbers","text":"<p>Prior to  8.1.0, code annotations were rendered with markers showing the original number as used by the author. However, for technical reasons code annotation numbers restart each code block, which might lead to confusion. For this reason, code annotations now render as <code>+</code> signs which are rotated if they're open to denote that clicking them again will close them.</p> <p>If you wish to revert to the prior behavior and display code annotation numbers, you can add an additional style sheet and copy and paste the following CSS:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .md-annotation__index &gt; ::before {\ncontent: attr(data-md-annotation-id);\n}\n.md-typeset :focus-within &gt; .md-annotation__index &gt; ::before {\ntransform: none;\n}\n</code></pre> <pre><code>extra_css:\n- stylesheets/extra.css\n</code></pre> <ol> <li> <p>Code annotations require syntax highlighting with [Pygments] \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"how-to/install/","title":"Install Sui-Base","text":""},{"location":"how-to/scripts/","title":"Scripts","text":"<p>TODO: Only about how they are useful... at high level.</p> <p>No exhaustive doc here. Usage doc is from the CLI \"--help\".</p>"},{"location":"how-to/todo/","title":"Todo","text":"<p>TODO</p>"},{"location":"python/","title":"sui-base : Python","text":"<p>Contains python CLI examples and docs for interacting with Sui blockchain</p>"},{"location":"python/#dependencies","title":"Dependencies","text":"<p>1 Recommended to always setup a python virtual environment 2 Examples rely on pysui</p>"},{"location":"python/#todo","title":"TODO","text":"<p>Everything</p>"},{"location":"rust/demo-app/","title":"demo-app","text":"<p>A good starting point for Rust+Move development on VSCode.</p> <p>What to expect?</p> <ul> <li>A simple Rust+Move dApps that increment a Counter on your localnet.</li> <li>The counter emit a Move event on every increment.</li> <li>Rust app that subscribe and show all Sui Move events (do \"cargo run events\") </li> <li>Rust app to send a transaction to increment the counter (do \"cargo run count\").</li> <li>Use of sui-base scripts and helper to accelerate and automate Sui development.</li> </ul> <p>To run this example, Sui-base installation is required. To open the project, point VSCode on ~/sui-base/rust/demo-app.</p> <p>Online references: Source Code , counter.move </p>"}]}