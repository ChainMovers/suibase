namespace suibase {};

[Error]
enum Error {
  "NotInstalled",
  "WorkdirNotSelected",
  "WorkdirAccessError",
  "WorkdirNotExists",
  "SuibaseKeystoreNotExists",
  "PublishedDataNotFound",
  "MissingLinkDefinition",
  "MissingAtLeastOneLinkDefinition",
  "MissingLinkField",
  "ConfigAccessError",
  "ConfigReadError",
  "ConfigActiveAddressParseError",
  "WorkdirNameEmpty",
  "PackageNameEmpty",
  "AddressNameEmpty",
  "ObjectTypeMissingField",
  "ObjectTypeInvalidFormat",
  "AddressNameNotFound",
  "WorkdirStateNameAccessFailed",
  "WorkdirStateDNSAccessFailed",
  "WorkdirStateNameNotSet",
  "PackageIdJsonInvalidFormat",
  "PackageIdInvalidHex",
  "PublishedNewObjectReadError",
  "PublishedNewObjectParseError",
  "WorkdirInitializationIncomplete",
  "WorkdirStateDNSReadError",
  "WorkdirStateDNSParseError",
  "PublishedDataAccessError",
  "PublishedDataAccessErrorInvalidSymlink",
  "PublishedDataAccessErrorSymlinkNotFound",
  "PublishedNewObjectAccessError",
  "WorkdirStateLinkReadError",
  "WorkdirNameNotSet",
  "WorkdirPathNotSet",
  "FileNameEmpty",
  "StateNameEmpty",
};

interface Helper {
  constructor();

  [Throws=Error]
  boolean is_installed();

  [Throws=Error]
  void select_workdir([ByRef]string workdir_name);

  [Throws=Error]
  string workdir();

  [Throws=Error]
  string keystore_pathname();

  [Throws=Error]
  string package_id([ByRef]string package_name);

  [Throws=Error]
  sequence<string> published_new_objects([ByRef]string object_type);

  [Throws=Error]
  string client_address([ByRef]string address_name);

  [Throws=Error]
  string rpc_url();

  [Throws=Error]
  string ws_url();
};
