[workspace]
resolver = "2"
members = [
    "crates/demo",
]

[workspace.package]
version = "0.0.1"
edition = "2021"

[workspace.dependencies]
# Built is done using the same workdir made active
# with suibase 'asui'.
#
# This help keeping your selected network, app and SDKs and whatnot
# use the *same* binary versions.
#
# If you prefer the "typical" rust way of indepedently get the latest
# crates remotely from git, then comment out the 'path' dependencies
# and un-comment out the 'git' ones.
sui-sdk = { path = "../../../suibase/workdirs/active/sui-repo/crates/sui-sdk/" }
sui-json-rpc-types = { path = "../../../suibase/workdirs/active/sui-repo/crates/sui-json-rpc-types/" }
sui-keys = { path = "../../../suibase/workdirs/active/sui-repo/crates/sui-keys/" }
sui-types = { path = "../../../suibase/workdirs/active/sui-repo/crates/sui-types/" }
sui-adapter = { path = "../../../suibase/workdirs/active/sui-repo/crates/sui-adapter/" }
shared-crypto = { path = "../../../suibase/workdirs/active/sui-repo/crates/shared-crypto/" }

# Comment these "git" dependencies if using the above "path" dependencies.
#sui-sdk = { git = "https://github.com/MystenLabs/sui", branch = "devnet" }
#sui-json-rpc-types = { git = "https://github.com/MystenLabs/sui", branch = "devnet", package = "sui-json-rpc-types" }
#sui-keys = { git = "https://github.com/MystenLabs/sui", branch = "devnet", package = "sui-keys" }
#sui-types = { git = "https://github.com/MystenLabs/sui", branch = "devnet", package = "sui-types" }
#sui-adapter = { git = "https://github.com/MystenLabs/sui", branch = "devnet", package = "sui-adapter" }

futures = "0.3.25"

tokio = { version = "1.28.1", features = ["full"] }
telemetry-subscribers = { version = "0.2.0" }

anyhow = { version = "1.0.71", features = ["backtrace"] }
thiserror = "1.0"

# No upgrade to v4 until color are back.
clap = { version = "3.2.22", features = [
    "derive",
] }

colored = { version = "2.0.0" }

[workspace.dependencies.serial_test]
# Intended to be used as [dev-dependencies] only.
#
# Attribute macros to control how test can run sequentially/parallel.
#    https://tevps.net/blog/serial_test/
#
# Imagine a RWLock, the attributes do the following:
#   [serial]     : Equivalent to a writer lock on the "RWLock".
#   [parallel]   : Equivalent to a reader lock on the "RWLock".
#   No Attribute : Can run at anytime, ignores the RWLock.
#
# Why is that here?
# Sui "simple transaction" must be single threaded for owned objects and
# if you test with a single local wallet (which is often the case), then
# you have to be careful of doing the test serial.
version = "=0.9.0" # Force a version known to be OK.
