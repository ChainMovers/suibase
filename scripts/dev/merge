#!/bin/bash

# Merge dev into main branch
#
# Exit immediately if a command exits with a non-zero status
set -e

# Switch to dev branch if not already on it
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" != "dev" ]; then
  echo "Switching to dev branch"
  git checkout dev
fi

# Make sure the dev branch does not have uncommitted changes.
if ! git diff-index --quiet HEAD --; then
  echo "Uncommitted changes in the dev branch. Please commit or stash them before merging."
  exit 1
fi

# Make sure the dev branch is up-to-date with the remote.
git fetch origin dev
if [ "$(git rev-parse dev)" != "$(git rev-parse origin/dev)" ]; then
  echo "The dev branch is not up-to-date with the remote. Please push or pull the changes before merging."
  exit 1
fi

# Proceed to merge dev into main. Detect if there are conflicts, if yes
# give instruction to resolve them.

# Find the common ancestor of dev and main
merge_base=$(git merge-base dev main)

# Check if there are any changes from dev that are not in main
if git diff --quiet "$merge_base" dev; then
  echo "No changes to merge from dev to main."
else
  # Perform the actual merge
  if git merge --no-commit --no-ff dev; then
    # Check if there are any changes to commit
    if git diff-index --quiet HEAD --; then
      echo "No changes to merge from dev to main."
      git merge --abort
    else
      # Commit the merge if there are changes
      git commit -m "Merged dev into main"
      # Todo Add push when confident about how it works: git push origin main
      echo "Merged dev into main."
    fi
  else
    echo "Merge failed due to conflicts."
    echo "To resolve the conflicts, follow these steps:"
    echo "1. Identify the conflicted files using 'git status'."
    echo "2. Resolve the conflicts manually by editing the conflicted files."
    echo "3. Mark the conflicts as resolved using 'git add <file>'."
    echo "4. Complete the merge by running 'git commit' and 'push'."
    exit 1
  fi
fi

