name: Suibase Daemon Tests
# Test for suibase-daemon
#
# These tests **rebuild** the binaries from latest in branch (does not use pre-built)
#
on:
  push:
    branches: ["dev"]

  workflow_dispatch:

jobs:
  diff:
    runs-on: [ubuntu-latest]
    outputs:
      isChanged: ${{ steps.diff.outputs.isSuibaseDaemon }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect Changes
        uses: "./.github/actions/diffs"
        id: diff

      - name: Upload Trigger Artifact
        if: ${{ steps.diff.outputs.isSuibaseDaemon == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: Cargo.toml
          path: ./rust/suibase/Cargo.toml
          if-no-files-found: error
          retention-days: 1

  test:
    name: Test ${{ matrix.os }}
    needs: diff
    if: ${{ (needs.diff.outputs.isChanged == 'true') || (github.event_name == 'workflow_dispatch') }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    steps:
      - name: Free Disk Space (Ubuntu)
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main
        with:
          # 'true' means remove...
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false # Not sure if needed for heavy link... keep it for now.

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: "false" # Control cache in "Rust Caching" step instead.
          target: ${{ runner.os == 'Linux' && 'x86_64-unknown-linux-musl' || '' }}

      - name: Rust suibase-daemon caching
        uses: Swatinem/rust-cache@v2
        env:
          RUST_ADD_CACHE_KEY_COMPONENT: suibase-daemon-${{ matrix.os }}-${{ github.ref_name }}
        with:
          workspaces: |
            rust/suibase
          cache-provider: buildjet
          cache-all-crates: true

      - name: Sui Prerequisites (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install curl cmake gcc libssl-dev pkg-config libclang-dev libpq-dev build-essential musl musl-tools musl-dev

      - name: Sui Prerequisites (macOS)
        if: runner.os == 'macOS'
        run: |
          # Only install curl if not already present
          if ! command -v curl &>/dev/null; then
            brew install curl
          else
            echo "curl already installed, skipping"
          fi
          # Use brew reinstall to handle tap conflicts
          brew reinstall cmake

      - name: Prepare environment
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          ln -s "$GITHUB_WORKSPACE" "$HOME/suibase"

      - name: Install Rust musl target (Linux)
        if: runner.os == 'Linux'
        run: |
          # Install musl target matching Suibase's rust-toolchain.toml
          rust_channel=$(grep '^channel' $GITHUB_WORKSPACE/rust/suibase/rust-toolchain.toml | sed 's/channel = "\(.*\)"/\1/')
          echo "Installing Rust $rust_channel toolchain with musl target (required by Suibase)"
          rustup toolchain install $rust_channel --target x86_64-unknown-linux-musl --profile minimal

      - name: Run suibase rust apps only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          "$HOME/suibase/scripts/tests/run-all.sh" --suibase-daemon-tests
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "=== Binary Analysis ==="
            binary_path="$HOME/suibase/workdirs/common/bin/suibase-daemon"

            if [[ ! -f "$binary_path" ]]; then
              echo "❌ Binary not found at $binary_path"
              exit 1
            fi

            echo "File info:"
            file "$binary_path" || echo "Warning: file command failed"

            echo "Library dependencies:"
            ldd_output=$(ldd "$binary_path" 2>&1) || echo "Warning: ldd command failed"
            echo "$ldd_output"

            # Check for MUSL specifically
            if strings "$binary_path" | grep -i musl > /dev/null 2>&1; then
              echo "✅ MUSL detected in binary"
            else
              echo "❌ Binary appears to be dynamically linked"
              exit 1
            fi
          fi

  trig:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Create directory for artifact
        run: mkdir -p ./rust/suibase

      - name: Download Trigger Artifact
        uses: actions/download-artifact@v4
        with:
          name: Cargo.toml
          path: ./rust/suibase

      - name: Push Cargo.toml to trigger other repos
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.SUI_BINARIES_TOKEN }}
        with:
          source_file: "rust/suibase/Cargo.toml"
          destination_repo: "chainmovers/sui-binaries"
          destination_folder: "triggers/suibase-daemon"
          user_email: "4542410+mario4tier@users.noreply.github.com"
          user_name: "Mario Fortier"
