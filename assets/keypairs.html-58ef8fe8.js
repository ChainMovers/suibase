import{_ as o,Y as r,Z as d,a2 as c,a3 as i,$ as u,E as p,a0 as e,a1 as t}from"./framework-93324f42.js";const h={},b=u('<h2 id="facts" tabindex="-1"><a class="header-anchor" href="#facts" aria-hidden="true">#</a> Facts</h2><div class="hint-container tip"><p class="hint-container-title">Fact Sheet</p><ul><li>Sui keys, on disk for Sui binaries, are in file: <code>$HOME/sui_config/sui.keystore </code></li><li>Keys are persisted in the file as a JSON array</li><li>Entries in the array are base64 encoded strings e.g.: <code>AIUPxQveY18QxhDDdTO0D0OD6PNV+et50068d1g/rIyl</code></li><li>When base64 decoded, the byte counts of key strings is 33</li><li>The first byte of the decoded key indicates the key type followed by the 32 byte private key seed</li><li>Key types: <ul><li>0 -&gt; ed25519 keytype</li><li>1 -&gt; secp256k1 keytype</li><li>2 -&gt; secp256r1 keytype</li></ul></li><li>Public keys are generated from the private keys. The length of the public key in bytes: <ul><li>0 -&gt; 32 bytes</li><li>1 -&gt; 33 bytes</li><li>2 -&gt; 33 bytes</li></ul></li><li>Sui addresses are hex strings 66 characters long with prefix &#39;0x&#39;, e.g.: <code>0xa9e2db385f055cc0215a3cde268b76270535b9443807514f183be86926c219f4</code></li><li>Sui addresses are generated by hashing the key type and the public key bytes, converting to a hex string and prefixing with &#39;0x&#39;</li><li>blake2b is used for hashing</li></ul></div><p>Great for first time contributor.</p><p>Suggested subjects:</p><ul><li>How to generate a new keypair</li><li>How to restore a Keypair from a secret</li><li>How to verify a Keypair</li><li>How to generate a vanity address</li><li>How to import/export (explain sui.keystore hexa need &#39;sui keytool convert&#39; for wallet import).</li></ul><p>Template for snippets:</p>',6),y=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`To be done. Add your contribution here.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),g=e("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[e("pre",{class:"language-rust"},[e("code",null,[e("span",{class:"token class-name"},"To"),t(" be done"),e("span",{class:"token punctuation"},"."),t(),e("span",{class:"token class-name"},"Add"),t(" your contribution here"),e("span",{class:"token punctuation"},"."),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v=e("div",{class:"language-python line-numbers-mode","data-ext":"py"},[e("pre",{class:"language-python"},[e("code",null,[t("To be done"),e("span",{class:"token punctuation"},"."),t(" Add your contribution here"),e("span",{class:"token punctuation"},"."),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),f=e("div",{class:"language-Ruse line-numbers-mode","data-ext":"Ruse"},[e("pre",{class:"language-Ruse"},[e("code",null,`To be done. Add your contribution here.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1);function m(k,_){const l=p("CodeTabs");return r(),d("div",null,[b,c(l,{id:"127",data:[{title:"CLI"},{title:"Rust"},{title:"Python"},{title:"PySui Wallet"}],active:0},{tab0:i(({title:s,value:a,isActive:n})=>[y]),tab1:i(({title:s,value:a,isActive:n})=>[g]),tab2:i(({title:s,value:a,isActive:n})=>[v]),tab3:i(({title:s,value:a,isActive:n})=>[f]),_:1})])}const w=o(h,[["render",m],["__file","keypairs.html.vue"]]);export{w as default};
