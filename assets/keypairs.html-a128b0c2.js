import{_ as c,Y as l,Z as r,a2 as p,a3 as s,$ as u,E as d,a0 as e,a1 as n}from"./framework-93324f42.js";const k={},m=u('<h2 id="facts" tabindex="-1"><a class="header-anchor" href="#facts" aria-hidden="true">#</a> Facts</h2><div class="hint-container tip"><p class="hint-container-title">Fact Sheet</p><ul><li>Sui keys, on disk for Sui binaries, are in file: <code>$HOME/sui_config/sui.keystore </code></li><li>Keys are persisted in the file as a JSON array</li><li>Entries in the array are base64 encoded strings e.g.: <code>AIUPxQveY18QxhDDdTO0D0OD6PNV+et50068d1g/rIyl</code></li><li>When base64 decoded, the byte counts of key strings is 33</li><li>The first byte of the decoded key indicates the key type followed by the 32 byte private key seed</li><li>Key types: <ul><li>0 -&gt; ed25519 keytype</li><li>1 -&gt; secp256k1 keytype</li><li>2 -&gt; secp256r1 keytype</li></ul></li><li>Public keys are generated from the private keys. The length of the public key in bytes: <ul><li>0 -&gt; 32 bytes</li><li>1 -&gt; 33 bytes</li><li>2 -&gt; 33 bytes</li></ul></li><li>Sui addresses are hex strings 66 characters long with prefix &#39;0x&#39;, e.g.: <code>0xa9e2db385f055cc0215a3cde268b76270535b9443807514f183be86926c219f4</code></li><li>Sui addresses are generated by hashing the key type and the public key bytes, converting to a hex string and prefixing with &#39;0x&#39;</li><li>blake2b is used for hashing</li></ul></div><p>Great for first time contributor.</p><p>Suggested subjects:</p><ul><li>How to generate a new keypair</li><li>How to restore a Keypair from a secret</li><li>How to verify a Keypair</li><li>How to generate a vanity address</li><li>How to import/export (explain sui.keystore hexa need &#39;sui keytool convert&#39; for wallet import).</li></ul><h2 id="how-to-generate-a-new-keypair" tabindex="-1"><a class="header-anchor" href="#how-to-generate-a-new-keypair" aria-hidden="true">#</a> How to generate a new Keypair</h2><p>Different actions that you make with Sui libraries require a keypair. A keypair can be generated by using cryptographic algorithms such as: Ed25519, ECDSA Secp256k1 &amp; ECDSA Secp256r1.</p>',7),y=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`To be done. Add your contribution here.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),h=e("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[e("pre",{class:"language-rust"},[e("code",null,[e("span",{class:"token class-name"},"To"),n(" be done"),e("span",{class:"token punctuation"},"."),n(),e("span",{class:"token class-name"},"Add"),n(" your contribution here"),e("span",{class:"token punctuation"},"."),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),b=e("div",{class:"language-python line-numbers-mode","data-ext":"py"},[e("pre",{class:"language-python"},[e("code",null,[e("span",{class:"token keyword"},"from"),n(" pysui"),e("span",{class:"token punctuation"},"."),n("abstracts"),e("span",{class:"token punctuation"},"."),n("client_keypair "),e("span",{class:"token keyword"},"import"),n(` SignatureScheme
`),e("span",{class:"token keyword"},"from"),n(" pysui"),e("span",{class:"token punctuation"},"."),n("sui"),e("span",{class:"token punctuation"},"."),n("sui_config "),e("span",{class:"token keyword"},"import"),n(` SuiConfig

`),e("span",{class:"token comment"},"# The method we want to use is on the SuiConfig object"),n(`
config `),e("span",{class:"token operator"},"="),n(" SuiConfig"),e("span",{class:"token punctuation"},"."),n("default_config"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),n(`

`),e("span",{class:"token comment"},"# Create a new ed25519 keypair and writes to sui.keystore"),n(`
`),e("span",{class:"token comment"},"# With no additional arguments, pysui generates a 24 work mnemonic phrase and"),n(`
`),e("span",{class:"token comment"},"# default derivation path associated with the key SignatureScheme"),n(`

`),e("span",{class:"token comment"},"# ed25519"),n(`
ed_mnemonics`),e("span",{class:"token punctuation"},","),n(" ed_address "),e("span",{class:"token operator"},"="),n(" config"),e("span",{class:"token punctuation"},"."),n("create_new_keypair_and_address"),e("span",{class:"token punctuation"},"("),n("SignatureScheme"),e("span",{class:"token punctuation"},"."),n("ED25519"),e("span",{class:"token punctuation"},")"),n(`
`),e("span",{class:"token keyword"},"print"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-interpolation"},[e("span",{class:"token string"},'f"ed25519 Address: '),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("ed_address"),e("span",{class:"token punctuation"},"."),n("address"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"}," phrase: "),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("ed_mnemonics"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"},'"')]),e("span",{class:"token punctuation"},")"),n(`

`),e("span",{class:"token comment"},"# secp256k1"),n(`
k1_mnemonics`),e("span",{class:"token punctuation"},","),n(" k1_address "),e("span",{class:"token operator"},"="),n(" config"),e("span",{class:"token punctuation"},"."),n("create_new_keypair_and_address"),e("span",{class:"token punctuation"},"("),n("SignatureScheme"),e("span",{class:"token punctuation"},"."),n("SECP256K1"),e("span",{class:"token punctuation"},")"),n(`
`),e("span",{class:"token keyword"},"print"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-interpolation"},[e("span",{class:"token string"},'f"secp256k1 Address: '),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("k1_address"),e("span",{class:"token punctuation"},"."),n("address"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"}," phrase: "),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("k1_mnemonics"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"},'"')]),e("span",{class:"token punctuation"},")"),n(`

`),e("span",{class:"token comment"},"# secp256r1"),n(`
r1_mnemonics`),e("span",{class:"token punctuation"},","),n(" r1_address "),e("span",{class:"token operator"},"="),n(" config"),e("span",{class:"token punctuation"},"."),n("create_new_keypair_and_address"),e("span",{class:"token punctuation"},"("),n("SignatureScheme"),e("span",{class:"token punctuation"},"."),n("SECP256R1"),e("span",{class:"token punctuation"},")"),n(`
`),e("span",{class:"token keyword"},"print"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string-interpolation"},[e("span",{class:"token string"},'f"secp256r1 Address: '),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("r1_address"),e("span",{class:"token punctuation"},"."),n("address"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"}," phrase: "),e("span",{class:"token interpolation"},[e("span",{class:"token punctuation"},"{"),n("r1_mnemonics"),e("span",{class:"token punctuation"},"}")]),e("span",{class:"token string"},'"')]),e("span",{class:"token punctuation"},")"),n(`

`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),g=e("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[e("pre",{class:"language-typescript"},[e("code",null,[e("span",{class:"token comment"},"// Generate Ed25519 keypair"),n(`
`),e("span",{class:"token keyword"},"const"),n(" keypair_ed25519 "),e("span",{class:"token operator"},"="),n(),e("span",{class:"token keyword"},"new"),n(),e("span",{class:"token class-name"},"Ed25519Keypair"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),n(`

`),e("span",{class:"token comment"},"// Generate Seco256k1 keypair"),n(`
`),e("span",{class:"token keyword"},"const"),n(" keypair_secp256k1 "),e("span",{class:"token operator"},"="),n(),e("span",{class:"token keyword"},"new"),n(),e("span",{class:"token class-name"},"Secp256k1Keypair"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1);function v(_,f){const o=d("CodeTabs");return l(),r("div",null,[m,p(o,{id:"130",data:[{title:"CLI"},{title:"Rust"},{title:"Python"},{title:"TypeScript"}],active:0},{tab0:s(({title:a,value:t,isActive:i})=>[y]),tab1:s(({title:a,value:t,isActive:i})=>[h]),tab2:s(({title:a,value:t,isActive:i})=>[b]),tab3:s(({title:a,value:t,isActive:i})=>[g]),_:1})])}const S=c(k,[["render",v],["__file","keypairs.html.vue"]]);export{S as default};
