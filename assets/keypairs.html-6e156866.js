import{_ as r,Y as o,Z as c,a2 as d,a3 as s,$ as u,E as p,a0 as e,a1 as a}from"./framework-93324f42.js";const y={},h=u('<h2 id="facts" tabindex="-1"><a class="header-anchor" href="#facts" aria-hidden="true">#</a> Facts</h2><div class="hint-container tip"><p class="hint-container-title">Fact Sheet</p><ul><li>Sui keys, on disk for Sui binaries, are in file: <code>$HOME/sui_config/sui.keystore </code></li><li>Keys are persisted in the file as a JSON array</li><li>Entries in the array are base64 encoded strings e.g.: <code>AIUPxQveY18QxhDDdTO0D0OD6PNV+et50068d1g/rIyl</code></li><li>When base64 decoded, the byte counts of key strings is 33</li><li>The first byte of the decoded key indicates the key type followed by the 32 byte private key seed</li><li>Key types: <ul><li>0 -&gt; ed25519 keytype</li><li>1 -&gt; secp256k1 keytype</li><li>2 -&gt; secp256r1 keytype</li></ul></li><li>Public keys are generated from the private keys. The length of the public key in bytes: <ul><li>0 -&gt; 32 bytes</li><li>1 -&gt; 33 bytes</li><li>2 -&gt; 33 bytes</li></ul></li><li>Sui addresses are hex strings 66 characters long with prefix &#39;0x&#39;, e.g.: <code>0xa9e2db385f055cc0215a3cde268b76270535b9443807514f183be86926c219f4</code></li><li>Sui addresses are generated by hashing the key type and the public key bytes, converting to a hex string and prefixing with &#39;0x&#39;</li><li>blake2b is used for hashing</li></ul></div><p>Great for first time contributor.</p><p>Suggested subjects:</p><ul><li>How to generate a new keypair</li><li>How to restore a Keypair from a secret</li><li>How to verify a Keypair</li><li>How to generate a vanity address</li><li>How to import/export (explain sui.keystore hexa need &#39;sui keytool convert&#39; for wallet import).</li></ul><h2 id="how-to-generate-a-new-keypair" tabindex="-1"><a class="header-anchor" href="#how-to-generate-a-new-keypair" aria-hidden="true">#</a> How to generate a new Keypair</h2><p>Different actions that you make with Sui libraries require a keypair. A keypair can be generated by using cryptographic algorithms such as: Ed25519, ECDSA Secp256k1 &amp; ECDSA Secp256r1.</p>',7),b=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`To be done. Add your contribution here.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-rust line-numbers-mode","data-ext":"rs"},[e("pre",{class:"language-rust"},[e("code",null,[e("span",{class:"token class-name"},"To"),a(" be done"),e("span",{class:"token punctuation"},"."),a(),e("span",{class:"token class-name"},"Add"),a(" your contribution here"),e("span",{class:"token punctuation"},"."),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),g=e("div",{class:"language-python line-numbers-mode","data-ext":"py"},[e("pre",{class:"language-python"},[e("code",null,[a("To be done"),e("span",{class:"token punctuation"},"."),a(" Add your contribution here"),e("span",{class:"token punctuation"},"."),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),m=e("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[e("pre",{class:"language-typescript"},[e("code",null,[e("span",{class:"token comment"},"// Generate Ed25519 keypair"),a(`
`),e("span",{class:"token keyword"},"const"),a(" keypair_ed25519 "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token keyword"},"new"),a(),e("span",{class:"token class-name"},"Ed25519Keypair"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`

`),e("span",{class:"token comment"},"// Generate Seco256k1 keypair"),a(`
`),e("span",{class:"token keyword"},"const"),a(" keypair_secp256k1 "),e("span",{class:"token operator"},"="),a(),e("span",{class:"token keyword"},"new"),a(),e("span",{class:"token class-name"},"Secp256k1Keypair"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),v=e("div",{class:"language-Ruse line-numbers-mode","data-ext":"Ruse"},[e("pre",{class:"language-Ruse"},[e("code",null,`To be done. Add your contribution here.
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1);function f(_,w){const l=p("CodeTabs");return o(),c("div",null,[h,d(l,{id:"130",data:[{title:"CLI"},{title:"Rust"},{title:"Python"},{title:"TypeScript"},{title:"PySui Wallet"}],active:0},{tab0:s(({title:t,value:i,isActive:n})=>[b]),tab1:s(({title:t,value:i,isActive:n})=>[k]),tab2:s(({title:t,value:i,isActive:n})=>[g]),tab3:s(({title:t,value:i,isActive:n})=>[m]),tab4:s(({title:t,value:i,isActive:n})=>[v]),_:1})])}const S=r(y,[["render",f],["__file","keypairs.html.vue"]]);export{S as default};
