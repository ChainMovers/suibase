import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as o}from"./app-ddb948df.js";const i={},n=o('<p>A notable Sui feature is its capability to handle fast &quot;Simple transaction&quot; at scale. These are for single-owner objects that do not require relatively more costly/slower consensus.</p><div class="hint-container danger"><p class="hint-container-title">Danger</p><p>Fast transaction have to be done with care to avoid equivocations. This can result in the dreaded &quot;quorum failure&quot; that locks your owned object until the end of an epoch. This guide should help you design your app to benefit from fast transactions AND remain reliable.</p></div><h2 id="don-t-do-this" tabindex="-1"><a class="header-anchor" href="#don-t-do-this" aria-hidden="true">#</a> Don&#39;t do this</h2><p>May be, the most important to understand is what not to do:</p><ul><li>Do not initiate multiple transaction with the same owned object at the same time.</li><li>Do not use the same coin with multiple simple transaction at the same time.</li></ul><h2 id="from-slow-to-fast" tabindex="-1"><a class="header-anchor" href="#from-slow-to-fast" aria-hidden="true">#</a> From Slow To Fast</h2><p>TODO Refer to example transforming a slow design into fast ones (think I saw one in the Sui repo?)</p><h2 id="distinct-coins" tabindex="-1"><a class="header-anchor" href="#distinct-coins" aria-hidden="true">#</a> Distinct Coins</h2><p>TODO Explain how distinct coin management is crucial to parallel processing.</p><h2 id="faucet" tabindex="-1"><a class="header-anchor" href="#faucet" aria-hidden="true">#</a> Faucet</h2><p>TODO Explain how the Sui faucet work as a design example.</p>',11),s=[n];function r(c,h){return e(),a("div",null,s)}const u=t(i,[["render",r],["__file","fast_transactions.html.vue"]]);export{u as default};
