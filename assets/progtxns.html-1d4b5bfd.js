import{_ as i,Y as s,Z as r,$ as e,a0 as a,a1 as t,a3 as o,E as c}from"./framework-71e77c80.js";const l={},d=o('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Prior to Sui 0.28.x, to submit transactions with mutliple commands one was required to invoke the, recently renamed, <code>unsafe_batchTransaction</code>. This is somewhat limited to allowing only calls to <code>public entry fun</code> on contracts (a.k.a. move calls) and transfers.</p><p>Starting around Sui version 0.28.x MystenLabs introduced &#39;programmable transactions&#39; which expanded the capability of structuring multiple-diverse commands, sharing results between commands, lifting the limitations of calling only <code>public entry fun</code> to now include any <code>public fun</code> contract functions and much more.</p>',3),u={href:"https://docs.sui.io/devnet/build/prog-trans-ts-sdk",target:"_blank",rel:"noopener noreferrer"},h=o('<h2 id="this-document" tabindex="-1"><a class="header-anchor" href="#this-document" aria-hidden="true">#</a> This document</h2><p>The purpose of this guide is to add <strong>general</strong>, language agnostic, information about programmable transactions (herein referred to simply as &#39;transaction&#39; or &#39;transactions&#39;).</p><h2 id="what-is-a-transaction" tabindex="-1"><a class="header-anchor" href="#what-is-a-transaction" aria-hidden="true">#</a> What is a Transaction?</h2><ul><li>Transactions may contain one or more <a href="#what-are-commands">commands</a></li><li>Transactions support multiple <a href="#signing-transactions">signers</a></li><li>If one command in a transaction fails, the whole transaction fails</li><li>Transactions are inspectable (<code>sui_devInspectTransactionBlock</code> ) and can be dry-run (<code>sui_dryRunTransactionBlock</code>) as well</li><li>End points (i.e. devnet, testnet, etc.) are configurable</li></ul><h3 id="what-are-commands" tabindex="-1"><a class="header-anchor" href="#what-are-commands" aria-hidden="true">#</a> What are Commands</h3><p>Commands are a single unit of execution to which you can add many in a single transaction:</p><ul><li>Some of the SDK in the references come with &#39;out of the box&#39; commands, such as <code>split</code>,<code>merge</code> and <code>transfer</code></li><li>Commands can contain calls to Sui contracts/packages (i.e. move calls)</li><li>Move calls are not limited to <code>public entry</code> functions of the contract, calls to any <code>public</code> function are supported</li><li>Commands are run <em>sequentially</em></li><li>Command inputs may be simple (numbers, strings, addresses) or objects (coins, NFTs, shared objects, etc.)</li><li>Typically non-object inputs are often called &#39;pure&#39; wheras objects are called, well, &#39;objects&#39;</li><li>Inputs may be collections (i.e. vectors, lists or arrays) of &#39;pure&#39; types</li><li>Collections of objects are supported through &#39;making a Move vector&#39;, the results of which can be used as input to subesquent commands</li><li>Results of commands may be used as inputs to subsequent commands</li><li>Not all commands return a re-usable results. For example: <code>transfer</code> does not return a reusable result</li><li>Results may be a single result or an array/list of results</li></ul><h3 id="known-command-restrictions" tabindex="-1"><a class="header-anchor" href="#known-command-restrictions" aria-hidden="true">#</a> Known Command Restrictions</h3><ul><li>Commands can only operate with mutiple objects for which the primary sender can sign. In other words, if one command is operating with address &#39;A&#39; owned objects, a subequent command can not include address &#39;B&#39; owned objects as there is no way to include another signer. This restriction, and the associated signing liimitation, is reported to be in review to hopefully ease this constraint</li><li>Collections are limited to a depth level of 16 (e.g. <code>vector&lt;vector&lt;vector&lt;.....&gt;&gt;&gt;</code>)</li></ul><h3 id="signing-transactions" tabindex="-1"><a class="header-anchor" href="#signing-transactions" aria-hidden="true">#</a> Signing Transactions</h3><p>At the time of this writing, a maximum of two (2) signers are allowable:</p><ol><li>The sender, sometimes referred to as the primary signer (can be a MultiSig)</li><li>A sponsor if the payment for the transaction (gas) is provided by another gas object owner (can be a MultiSig)</li></ol><h2 id="additional-references" tabindex="-1"><a class="header-anchor" href="#additional-references" aria-hidden="true">#</a> Additional References</h2><p>Programmable transactions are supported in multiple programming languagges. Known at the time of this writing:</p>',14),m=e("li",null,"Typescript: MystenLabs TS SDK",-1),p=e("li",null,"Rust: MystenLab Rust SDK",-1),f={href:"https://github.com/FrankC01/pysui",target:"_blank",rel:"noopener noreferrer"};function g(b,y){const n=c("ExternalLinkIcon");return s(),r("div",null,[d,e("p",null,[a("The current MystenLabs documentation (using Typescript examples) can be found "),e("a",u,[a("Here"),t(n)])]),h,e("ul",null,[m,p,e("li",null,[a("Python: "),e("a",f,[a("pysui"),t(n)])])])])}const _=i(l,[["render",g],["__file","progtxns.html.vue"]]);export{_ as default};
